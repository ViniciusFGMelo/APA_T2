# llm.py
"""
üéØ Segundo Trabalho de Implementa√ß√£o ‚Äì An√°lise e Projeto de Algoritmos

Objetivo:
- Verificar se um grafo √© conexo (orientado ou n√£o orientado) utilizando DFS.
- Entrada em formato JSON.
"""

import json
import sys
import time
from collections import defaultdict


# ======================================================
# FUN√á√ïES AUXILIARES
# ======================================================

def construir_lista_adjacencia(vertices, arestas):
    """
    üìù Constr√≥i lista de adjac√™ncia para grafo n√£o orientado.

    ‚ö° Complexidade:
    - Tempo: O(|V| + |E|)
    - Espa√ßo: O(|V| + |E|)
    """
    adj = defaultdict(list)
    for u, v in arestas:
        adj[u].append(v)
        adj[v].append(u)  # n√£o orientado
    return adj


def construir_lista_sucessores(vertices, arcos):
    """
    üìù Constr√≥i lista de sucessores para grafo orientado (j√° simetrizado).

    ‚ö° Complexidade:
    - Tempo: O(|V| + |E|)
    - Espa√ßo: O(|V| + |E|)
    """
    adj = defaultdict(list)
    for u, v in arcos:
        adj[u].append(v)
    return adj


def dfs(grafo, inicio, visitados):
    """
    üîç Busca em profundidade (DFS).

    ‚ö° Complexidade:
    - Tempo: O(|V| + |E|)
    - Espa√ßo: O(|V|) (para a pilha de recurs√£o e conjunto de visitados)
    """
    visitados.add(inicio)
    for viz in grafo[inicio]:
        if viz not in visitados:
            dfs(grafo, viz, visitados)


def eh_conexo_nao_orientado(vertices, arestas):
    """
    üåê Verifica conectividade em grafo n√£o orientado.

    ‚ö° Complexidade:
    - Tempo: O(|V| + |E|)
    - Espa√ßo: O(|V| + |E|)
    """
    adj = construir_lista_adjacencia(vertices, arestas)
    inicio = next(iter(vertices))  # pega um v√©rtice qualquer
    visitados = set()
    dfs(adj, inicio, visitados)
    return visitados == vertices


def eh_conexo_orientado(vertices, arcos):
    """
    üåê Verifica conectividade em grafo orientado (com simetriza√ß√£o).

    ‚ö° Complexidade:
    - Tempo: O(|V| + |E|)
    - Espa√ßo: O(|V| + |E|)
    """
    # 1. Simetrizar
    arcos_simetrizados = set(arcos)
    for u, v in arcos:
        arcos_simetrizados.add((v, u))

    # 2. Construir lista de sucessores
    adj = construir_lista_sucessores(vertices, arcos_simetrizados)

    # 3. DFS
    inicio = next(iter(vertices))
    visitados = set()
    dfs(adj, inicio, visitados)

    # 4. Comparar fecho
    return visitados == vertices


# ======================================================
# MAIN ‚Äì LEITURA DO ARQUIVO JSON
# ======================================================
if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("‚ö†Ô∏è Uso: python3 llm.py <arquivo.json>")
        sys.exit(1)

    arquivo = sys.argv[1]

    with open(arquivo, "r", encoding="utf-8") as f:
        dados = json.load(f)

    nome = dados["nome"]
    tipo = dados["tipo"]
    vertices = set(dados["vertices"])
    ligacoes = [tuple(l) for l in dados["ligacoes"]]

    inicio_tempo = time.perf_counter()

    if tipo == "nao_orientado":
        conexo = eh_conexo_nao_orientado(vertices, ligacoes)
    elif tipo == "orientado":
        conexo = eh_conexo_orientado(vertices, ligacoes)
    else:
        print("‚ùå Tipo inv√°lido! Use 'nao_orientado' ou 'orientado'.")
        sys.exit(1)

    fim_tempo = time.perf_counter()
    tempo_execucao = fim_tempo - inicio_tempo

    # === Sa√≠da com emojis ===
    print(f"üìå Grafo: {nome}")
    print("‚úÖ Resultado: CONEXO" if conexo else "‚ùå Resultado: DESCONEXO")
    print(f"‚è±Ô∏è Tempo de execu√ß√£o: {tempo_execucao:.6f} segundos")
